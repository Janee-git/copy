- block:
        - name: Copy local queue MQSC file to remote host
          copy:
            src: "{{ mqsc_file }}"
            dest: "/tmp/{{ mqsc_file }}"
          become: yes
          become_user: mqm



#################
- name: Copy multiple MQSC files to remote host
  hosts: mq_servers
  vars:
    mqsc_files:
      - src: "/path/to/local/file1.mqsc"
        dest: "/tmp/file1.mqsc"
      - src: "/path/to/local/file2.mqsc"
        dest: "/tmp/file2.mqsc"
      - src: "/path/to/local/file3.mqsc"
        dest: "/tmp/file3.mqsc"

  tasks:
    - block:
        - name: Copy local MQSC files to remote host
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
          become: yes
          become_user: mqm
          loop: "{{ mqsc_files }}"
Explanation:
vars:: Defines a list of files with their respective source (src) and destination (dest) paths.
block:: Groups the tasks together. In this case, it helps in organizing the copy operations and can handle error handling or cleanup if needed.
copy:: Ansible module that copies files from the local machine to the remote host.
loop:: Iterates over the mqsc_files list, copying each file to its specified destination.
become: and become_user:: Ensures the task runs with elevated privileges as the mqm user, which is typically required for IBM MQ operations.
This approach is flexible and can easily be expanded to include more files or different destinations. If you need additional customizations or error handling within the block, let me know!
##############
make mqsc file for ibm mq on below command 
ALTER QMGR CHLAUTH(DISABLED)
REFRESH SECURITY TYPE(CONNAUTH)

--------------------
To create an MQSC file for IBM MQ with the following commands:

Disable Channel Authentication (CHLAUTH) for the Queue Manager.
Refresh the Security settings for Connection Authentication (CONNAUTH).
MQSC File Content (disable_chlauth_refresh_auth.mqsc):
mqsc
Copy
Edit
ALTER QMGR CHLAUTH(DISABLED)
REFRESH SECURITY TYPE(CONNAUTH)
Explanation:
ALTER QMGR CHLAUTH(DISABLED): Disables channel authentication checks for the Queue Manager. This is typically used in non-production environments or for troubleshooting purposes.
REFRESH SECURITY TYPE(CONNAUTH): Refreshes the security settings related to connection authentication. This ensures that changes to authentication configurations are applied immediately.
Usage:
You can use this MQSC file by running the following command on your IBM MQ server:

bash
Copy
Edit
runmqsc <QMGR_NAME> < disable_chlauth_refresh_auth.mqsc
Replace <QMGR_NAME> with the actual name of your Queue Manager.

Let me know if you need more configurations or help with automation using Ansible!

#####################

- block:
        - name: environment setup before create QMGR
          command: source /opt/mqm/bin/setmqenv || export MQSNOAUT=YES && set |grep -i mq
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

TASK [websphere-config : environment setup before create QMGR] *****************************************
fatal: [wmqeuu3.prod]: FAILED! => {"changed": false, "cmd": "source /opt/mqm/bin/setmqenv '||' export MQSNOAUT=YES '&&' set '|grep' -i mq", "msg": "[Errno 13] Permission denied: b'source'", "rc": 13}


- block:
    - name: Environment setup before creating QMGR
      shell: |
        source /opt/mqm/bin/setmqenv || export MQSNOAUT=YES && set | grep -i mq
      become: yes
      become_user: mqm
      when: qm_exists.rc != 0
###########################################################

[mqm@wmqeuu3 ~]$ runmqsc IFDSEUUQ2
5724-H72 (C) Copyright IBM Corp. 1994, 2024.
Starting MQSC for queue manager IFDSEUUQ2.


define qlocal(CTN.ORDER.RESQUEST)
     1 : define qlocal(CTN.ORDER.RESQUEST)
AMQ8006I: IBM MQ queue created.
ALTER QMGR CHLAUTH(DISABLED)
     2 : ALTER QMGR CHLAUTH(DISABLED)
AMQ8005I: IBM MQ queue manager changed.
def channel (ADMIN.CHANNEL) chltype(SVRCONN) MCAUSER('mqm') SSLCAUTH(OPTIONAL) TRPTYPE(TCP)
     3 : def channel (ADMIN.CHANNEL) chltype(SVRCONN) MCAUSER('mqm') SSLCAUTH(OPTIONAL) TRPTYPE(TCP)
AMQ8014I: IBM MQ channel created.
REFRESH SECURITY TYPE(CONNAUTH)
     4 : REFRESH SECURITY TYPE(CONNAUTH)
AMQ8560I: IBM MQ security cache refreshed.
end
     5 : end



---------------------------------------------------------
* Define a local queue
DEFINE QLOCAL(CTN.ORDER.RESQUEST)

* Disable channel authentication
ALTER QMGR CHLAUTH(DISABLED)

* Define a server connection channel with no SSL certificate authentication
DEFINE CHANNEL(ADMIN.CHANNEL) CHLTYPE(SVRCONN) MCAUSER('mqm') SSLCAUTH(OPTIONAL) TRPTYPE(TCP)

* Refresh security to apply changes
REFRESH SECURITY TYPE(CONNAUTH)


https://www.ibm.com/docs/en/ibm-mq/9.3?topic=amumc-running-mqsc-commands-from-text-files-under-runmqsc


run below clock in as ansible as shell not as command

- name: load mqsc data into Queue manager
  command: runmqsc -f /tmp/{{ mqsc_file }} "{{ queue_manager }}"
  become: yes
  become_user: mqm


To run the block as a shell rather than a command in Ansible, you can modify it like this:

yaml
Copy
Edit
- name: Load MQSC data into Queue Manager
  shell: runmqsc -f /tmp/{{ mqsc_file }} "{{ queue_manager }}"
  become: yes
  become_user: mqm
Why use shell instead of command?
The shell module uses the shell environment to execute commands, which means it supports more complex operations like pipes (|), redirects (>), and even variable expansions.
In contrast, command bypasses the shell and directly executes the binary, which might not inherit the full environment setup or context needed for runmqsc.
Additional Considerations:
If the mqsc_file or queue_manager contains any special characters or spaces, wrap them in double quotes for safety.
Using shell ensures the command runs in a proper shell environment, similar to how you would execute it manually as mqm.
If you need any more adjustments or explanations, feel free to ask!



Provide ansible yml to run below command remotely via ansibleplayuat id . 
[ansibleplayuat@ansiblem2 websphere-install-master]$ ssh mqm@wmqeuu3 "/tmp/wmqsetup.sh"


Here is the Ansible playbook to run the command remotely as the mqm user:

yaml
Copy
Edit
---
- name: Run wmqsetup.sh as mqm user remotely
  hosts: wmqeuu3
  gather_facts: no
  tasks:
    - name: Execute wmqsetup.sh as mqm user
      shell: ssh mqm@{{ inventory_hostname }} "/tmp/wmqsetup.sh"
      become: no
Explanation:
hosts: wmqeuu3 – Replace this with your inventory group or hostname.
gather_facts: no – Speeds up execution as facts are not required.
shell: – Using shell because the command includes SSH execution.
become: no – No need to escalate privileges as you are SSH-ing directly as mqm.
Notes:
Ensure that Ansible can SSH to the target host (wmqeuu3) as ansibleplayuat.
mqm user must have SSH access from ansibleplayuat without password prompts.
You might need SSH key setup or SSH agent forwarding for password-less authentication.
Inventory Example (hosts.ini):
ini
Copy
Edit
[wmqeuu3]
wmqeuu3 ansible_user=ansibleplayuat
If you need any adjustments or more help, let me know!




how to disabled SET AUTHREC when run runmqsc remotely with mqm id on ibm mq 9  
ChatGPT said:
In IBM MQ 9, when running runmqsc remotely using the mqm ID, SET AUTHREC commands might be automatically applied due to the way security settings are configured. This is typically related to the CHLAUTH and CONNAUTH settings in the Queue Manager.

To Disable SET AUTHREC:
Disable CHLAUTH: This disables all Channel Authentication Rules:

shell
Copy
Edit
ALTER QMGR CHLAUTH(DISABLED)
Disable CONNAUTH: This prevents MQ from enforcing connection authentication:

shell
Copy
Edit
ALTER QMGR CONNAUTH('')
REFRESH SECURITY TYPE(CONNAUTH)
Disable Automatic Authority Records (SET AUTHREC): IBM MQ 9 automatically sets AUTHREC when security is enabled. You can bypass this by setting the environment variable MQSNOAUT before running runmqsc.

Example in Ansible:
yaml
Copy
Edit
- name: Run MQSC commands remotely without setting AUTHREC
  shell: |
    export MQSNOAUT=YES
    runmqsc {{ queue_manager }} < /tmp/{{ mqsc_file }}
  become: yes
  become_user: mqm
Ensure Correct Permissions: Ensure the mqm user has the necessary permissions and isn't impacted by other security rules:

shell
Copy
Edit
SET AUTHREC PRINCIPAL('mqm') OBJTYPE(QMGR) AUTHADD(ALL)
Restart Queue Manager (Optional): If changes aren't effective, restart the Queue Manager:

shell
Copy
Edit
endmqm QMGR_NAME
strmqm QMGR_NAME
Summary:
MQSNOAUT=YES disables the automatic SET AUTHREC.
Disabling CHLAUTH and CONNAUTH can also prevent security checks.
Ensure to refresh the security settings using:
shell
Copy
Edit
REFRESH SECURITY TYPE(CONNAUTH)
Let me know if you need more help with IBM MQ or Ansible automation!




DISPLAY AUTHREC OBJTYPE(*)
     2 : DISPLAY AUTHREC OBJTYPE(*)
AMQ8405I: Syntax error detected at or near end of command segment below:-
DISPLAY AUTHREC OBJTYPE(*

AMQ8427I: Valid syntax for the MQSC command:

  DISPLAY AUTHREC

     [ PROFILE( profile_name ) ]

     [ OBJTYPE( AUTHINFO | CHANNEL  | CLNTCONN | COMMINFO | LISTENER |
                NAMELIST | PROCESS  | QMGR     | QUEUE    | RQMNAME  |
                SERVICE  | TOPIC    ) ]

     [ PRINCIPAL( principal_name ) | GROUP( group_name ) ]

     [ MATCH( PROFILE | MEMBERSHIP | EXACT ) ]

     [ SERVCOMP( service_component_name ) ]

     [ ALL      ] [ AUTHLIST ] [ ENTITY   ] [ ENTTYPE  ]


#######################################
how to remove below AUTRREC 
[mqm@wmqeuu3 ~]$ echo "DISPLAY AUTHREC OBJTYPE(QMGR) ALL" |runmqsc IFDSEUUQ2
5724-H72 (C) Copyright IBM Corp. 1994, 2024.
Starting MQSC for queue manager IFDSEUUQ2.


     1 : DISPLAY AUTHREC OBJTYPE(QMGR) ALL
AMQ8864I: Display authority record details.
   PROFILE(self)                           ENTITY(mqm)
   ENTTYPE(GROUP)                          OBJTYPE(QMGR)
   AUTHLIST(ALTUSR,CHG,CONNECT,DLT,DSP,INQ,SET,SETALL,SETID,CTRL,SYSTEM)
AMQ8864I: Display authority record details.
   PROFILE(@class)                         ENTITY(mqm)
   ENTTYPE(GROUP)                          OBJTYPE(QMGR)
   AUTHLIST(CRT)
One MQSC command read.
No commands have a syntax error.
All valid MQSC commands were processed.


1. Remove AUTHREC for PROFILE(self):
shell
Copy
Edit
echo "SET AUTHREC PROFILE(self) OBJTYPE(QMGR) GROUP(mqm) AUTHADD(ALL) REMOVE" | runmqsc IFDSEUUQ2
2. Remove AUTHREC for PROFILE(@class):
shell
Copy
Edit
echo "SET AUTHREC PROFILE(@class) OBJTYPE(QMGR) GROUP(mqm) AUTHADD(ALL) REMOVE" | runmqsc IFDSEUUQ2
3. Verify Removal:
After running the commands, verify the changes with:

shell
Copy
Edit
echo "DISPLAY AUTHREC OBJTYPE(QMGR) ALL" | runmqsc IFDSEUUQ2
You should see no entries related to PROFILE(self) or PROFILE(@class).

4. Explanation:
AUTHADD(ALL) REMOVE: This combination removes all authorization records for the specified PROFILE and GROUP.
OBJTYPE(QMGR): Targets the queue manager object type.
GROUP(mqm): Specifies the LDAP group mqm.
If the records persist, double-check the group membership or manually clear the queue manager's security cache:

shell
Copy
Edit
echo "REFRESH SECURITY TYPE(ALL)" | runmqsc IFDSEUUQ2
If you face any issues or need additional adjustments, let me know!


##################
[ansibleplayuat@ansiblem2 tasks]$ cat main.yml
---
    - name: Install required packages
      yum:
        name:
          - glibc
          - pam
          - libstdc++.so.6
          - java
        state: present

    - name: Add MQM user
      user:
        name: mqm
        state: present
        group: mqm

    - name: Create WMQ directory
      file:
        path: /opt/WMQ
        state: directory
        owner: mqm
        group: mqm

    - name: Extract IBM MQ bundle
      unarchive:
        src: 9.4.0.0-IBM-MQ-LinuxX64.tar.gz
        dest: /opt/WMQ

    - name: Accept MQ license
      command: ./mqlicense.sh -accept
      args:
        chdir: /opt/WMQ/MQServer

    - name: Gather MQ RPM files
      find:
        paths: /opt/WMQ/MQServer/
        patterns: "MQ*.rpm"
      register: mq_rpms

    - name: Install MQ RPMs
      command: rpm -ivh /opt/WMQ/MQServer/MQ*.rpm
      args:
        chdir: /opt/WMQ/MQServer
      register: install_result
      ignore_errors: yes

    - name: Set MQ environment
      command: ./setmqinst -i -p /opt/mqm
      args:
        chdir: /opt/mqm/bin
[ansibleplayuat@ansiblem2 tasks]$


tasks:
    - name: Add mqm user using shell command
      shell: /usr/sbin/luseradd mqm
      args:
        creates: /home/mqm
      ignore_errors: yes  

    - name: Set password for mqm user securely
      shell: echo "{{ mqm_password }}" | passwd --stdin mqm


##########################################################################################
[root@ansiblem2 tasks]# cat main.yml
---
    - name: Ensure queue manager does not already exist
      shell: dspmq | grep -q {{ queue_manager }}
      register: qm_exists
      ignore_errors: yes

    - block:
        - name: environment setup before create QMGR
          shell: |
            source /opt/mqm/bin/setmqenv || export MQSNOAUT=YES && set | grep -i mq
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

        - name: Create a queue manager
          command: crtmqm -u SYSTEM.DEAD.LETTER.QUEUE -p {{admin_port}} {{ queue_manager }}
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

        - name: Start queue manager
          command: strmqm {{ queue_manager }}
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

      when: qm_exists.rc != 0

    - block:
        - name: Copy Admin channel  MQSC file to remote host
          copy:
            src: "{{ mqsc_channel_C1 }}"
            dest: "/tmp/{{ mqsc_channel_C1 }}"
          become: yes
          become_user: mqm

        - name: Copy local queue MQSC file to remote host
          copy:
            src: "{{ mqsc_lqueues }}"
            dest: "/tmp/{{ mqsc_lqueues }}"
          become: yes
          become_user: mqm

        - name: load ADMIN channel setup mqsc data into Queue manager
          shell: runmqsc -f /tmp/{{ mqsc_channel_C1 }} "{{ queue_manager }}"
          become: yes
          become_user: mqm

        - name: load Local queue mqsc data into Queue manager
          shell: runmqsc -f /tmp/{{ mqsc_lqueues }} "{{ queue_manager }}"
          become: yes
          become_user: mqm

      when: qm_exists.rc != 0 or qm_exists.rc == 0

[root@ansiblem2 tasks]#


- block:
    - name: Copy Admin channel MQSC file to remote host
      copy:
        src: "{{ mqsc_channel_C1 }}"
        dest: "/tmp/{{ mqsc_channel_C1 }}"
      become: yes
      become_user: mqm

    - name: Copy local queue MQSC file to remote host
      copy:
        src: "{{ mqsc_lqueues }}"
        dest: "/tmp/{{ mqsc_lqueues }}"
      become: yes
      become_user: mqm

    - name: Ensure MQSC file exists
      stat:
        path: "/tmp/{{ mqsc_lqueues }}"
      register: mqsc_file

    - name: Check if Queue Manager is running
      shell: dspmq | grep {{ queue_manager }} | grep -q "RUNNING"
      register: qm_running
      failed_when: qm_running.rc > 1
      ignore_errors: yes

    - name: Load ADMIN channel setup mqsc data into Queue manager
      shell: "cat /tmp/{{ mqsc_channel_C1 }} | runmqsc {{ queue_manager }}"
      become: yes
      become_user: mqm
      when: qm_running.rc == 0

    - name: Load Local queue mqsc data into Queue manager
      shell: "cat /tmp/{{ mqsc_lqueues }} | runmqsc {{ queue_manager }}"
      become: yes
      become_user: mqm
      when: qm_running.rc == 0 and mqsc_file.stat.exists
  when: qm_exists.rc != 0


ERROR! We were unable to read either as JSON nor YAML, these are the errors we got from each:
JSON: No JSON object could be decoded

Syntax Error while loading YAML.
  did not find expected <document start>

The error appears to be in '/playbook/files/websphere-install-master/roles/websphere-config/tasks/main.yml': line 44, column 3, but may
be elsewhere in the file depending on the exact syntax problem.

The offending line appears to be:

      when: qm_running.rc == 0 and mqsc_file.stat.exists
  when: qm_exists.rc != 0
  ^ here

##############################
[root@ansiblem2 tasks]# cat main.yml
---
    - name: Ensure queue manager does not already exist
      shell: dspmq | grep -q {{ queue_manager }}
      register: qm_exists
      ignore_errors: yes

    - block:
        - name: environment setup before create QMGR
          shell: |
            source /opt/mqm/bin/setmqenv || export MQSNOAUT=YES && set | grep -i mq
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

        - name: Create a queue manager
          command: crtmqm -u SYSTEM.DEAD.LETTER.QUEUE -p {{admin_port}} {{ queue_manager }}
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

        - name: Start queue manager
          command: strmqm {{ queue_manager }}
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

      when: qm_exists.rc != 0

    - block:
        - name: Copy Admin channel MQSC file to remote host
          copy:
          src: "{{ mqsc_channel_C1 }}"
          dest: "/tmp/{{ mqsc_channel_C1 }}"
          become: yes
          become_user: mqm

        - name: Copy local queue MQSC file to remote host
          copy:
          src: "{{ mqsc_lqueues }}"
          dest: "/tmp/{{ mqsc_lqueues }}"
          become: yes
          become_user: mqm

        - name: Ensure MQSC file exists
          stat:
          path: "/tmp/{{ mqsc_lqueues }}"
          register: mqsc_file

        - name: Check if Queue Manager is running
          shell: dspmq | grep {{ queue_manager }} | grep -q "RUNNING"
          register: qm_running
          failed_when: qm_running.rc > 1
          ignore_errors: yes

        - name: Load ADMIN channel setup mqsc data into Queue manager
          shell: "cat /tmp/{{ mqsc_channel_C1 }} | runmqsc {{ queue_manager }}"
          become: yes
          become_user: mqm
          when: qm_running.rc == 0

        - name: Load Local queue mqsc data into Queue manager
          shell: "cat /tmp/{{ mqsc_lqueues }} | runmqsc {{ queue_manager }}"
          become: yes
          become_user: mqm
          when: qm_running.rc == 0 and mqsc_file.stat.exists

      when: qm_exists.rc != 0
[root@ansiblem2 tasks]#

