- block:
        - name: Copy local queue MQSC file to remote host
          copy:
            src: "{{ mqsc_file }}"
            dest: "/tmp/{{ mqsc_file }}"
          become: yes
          become_user: mqm



#################
- name: Copy multiple MQSC files to remote host
  hosts: mq_servers
  vars:
    mqsc_files:
      - src: "/path/to/local/file1.mqsc"
        dest: "/tmp/file1.mqsc"
      - src: "/path/to/local/file2.mqsc"
        dest: "/tmp/file2.mqsc"
      - src: "/path/to/local/file3.mqsc"
        dest: "/tmp/file3.mqsc"

  tasks:
    - block:
        - name: Copy local MQSC files to remote host
          copy:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
          become: yes
          become_user: mqm
          loop: "{{ mqsc_files }}"
Explanation:
vars:: Defines a list of files with their respective source (src) and destination (dest) paths.
block:: Groups the tasks together. In this case, it helps in organizing the copy operations and can handle error handling or cleanup if needed.
copy:: Ansible module that copies files from the local machine to the remote host.
loop:: Iterates over the mqsc_files list, copying each file to its specified destination.
become: and become_user:: Ensures the task runs with elevated privileges as the mqm user, which is typically required for IBM MQ operations.
This approach is flexible and can easily be expanded to include more files or different destinations. If you need additional customizations or error handling within the block, let me know!
##############
make mqsc file for ibm mq on below command 
ALTER QMGR CHLAUTH(DISABLED)
REFRESH SECURITY TYPE(CONNAUTH)

--------------------
To create an MQSC file for IBM MQ with the following commands:

Disable Channel Authentication (CHLAUTH) for the Queue Manager.
Refresh the Security settings for Connection Authentication (CONNAUTH).
MQSC File Content (disable_chlauth_refresh_auth.mqsc):
mqsc
Copy
Edit
ALTER QMGR CHLAUTH(DISABLED)
REFRESH SECURITY TYPE(CONNAUTH)
Explanation:
ALTER QMGR CHLAUTH(DISABLED): Disables channel authentication checks for the Queue Manager. This is typically used in non-production environments or for troubleshooting purposes.
REFRESH SECURITY TYPE(CONNAUTH): Refreshes the security settings related to connection authentication. This ensures that changes to authentication configurations are applied immediately.
Usage:
You can use this MQSC file by running the following command on your IBM MQ server:

bash
Copy
Edit
runmqsc <QMGR_NAME> < disable_chlauth_refresh_auth.mqsc
Replace <QMGR_NAME> with the actual name of your Queue Manager.

Let me know if you need more configurations or help with automation using Ansible!

#####################

- block:
        - name: environment setup before create QMGR
          command: source /opt/mqm/bin/setmqenv || export MQSNOAUT=YES && set |grep -i mq
          become: yes
          become_user: mqm
          when: qm_exists.rc != 0

TASK [websphere-config : environment setup before create QMGR] *****************************************
fatal: [wmqeuu3.prod]: FAILED! => {"changed": false, "cmd": "source /opt/mqm/bin/setmqenv '||' export MQSNOAUT=YES '&&' set '|grep' -i mq", "msg": "[Errno 13] Permission denied: b'source'", "rc": 13}


- block:
    - name: Environment setup before creating QMGR
      shell: |
        source /opt/mqm/bin/setmqenv || export MQSNOAUT=YES && set | grep -i mq
      become: yes
      become_user: mqm
      when: qm_exists.rc != 0
###########################################################

[mqm@wmqeuu3 ~]$ runmqsc IFDSEUUQ2
5724-H72 (C) Copyright IBM Corp. 1994, 2024.
Starting MQSC for queue manager IFDSEUUQ2.


define qlocal(CTN.ORDER.RESQUEST)
     1 : define qlocal(CTN.ORDER.RESQUEST)
AMQ8006I: IBM MQ queue created.
ALTER QMGR CHLAUTH(DISABLED)
     2 : ALTER QMGR CHLAUTH(DISABLED)
AMQ8005I: IBM MQ queue manager changed.
def channel (ADMIN.CHANNEL) chltype(SVRCONN) MCAUSER('mqm') SSLCAUTH(OPTIONAL) TRPTYPE(TCP)
     3 : def channel (ADMIN.CHANNEL) chltype(SVRCONN) MCAUSER('mqm') SSLCAUTH(OPTIONAL) TRPTYPE(TCP)
AMQ8014I: IBM MQ channel created.
REFRESH SECURITY TYPE(CONNAUTH)
     4 : REFRESH SECURITY TYPE(CONNAUTH)
AMQ8560I: IBM MQ security cache refreshed.
end
     5 : end



---------------------------------------------------------
* Define a local queue
DEFINE QLOCAL(CTN.ORDER.RESQUEST)

* Disable channel authentication
ALTER QMGR CHLAUTH(DISABLED)

* Define a server connection channel with no SSL certificate authentication
DEFINE CHANNEL(ADMIN.CHANNEL) CHLTYPE(SVRCONN) MCAUSER('mqm') SSLCAUTH(OPTIONAL) TRPTYPE(TCP)

* Refresh security to apply changes
REFRESH SECURITY TYPE(CONNAUTH)


https://www.ibm.com/docs/en/ibm-mq/9.3?topic=amumc-running-mqsc-commands-from-text-files-under-runmqsc


run below clock in as ansible as shell not as command

- name: load mqsc data into Queue manager
  command: runmqsc -f /tmp/{{ mqsc_file }} "{{ queue_manager }}"
  become: yes
  become_user: mqm


To run the block as a shell rather than a command in Ansible, you can modify it like this:

yaml
Copy
Edit
- name: Load MQSC data into Queue Manager
  shell: runmqsc -f /tmp/{{ mqsc_file }} "{{ queue_manager }}"
  become: yes
  become_user: mqm
Why use shell instead of command?
The shell module uses the shell environment to execute commands, which means it supports more complex operations like pipes (|), redirects (>), and even variable expansions.
In contrast, command bypasses the shell and directly executes the binary, which might not inherit the full environment setup or context needed for runmqsc.
Additional Considerations:
If the mqsc_file or queue_manager contains any special characters or spaces, wrap them in double quotes for safety.
Using shell ensures the command runs in a proper shell environment, similar to how you would execute it manually as mqm.
If you need any more adjustments or explanations, feel free to ask!



Provide ansible yml to run below command remotely via ansibleplayuat id . 
[ansibleplayuat@ansiblem2 websphere-install-master]$ ssh mqm@wmqeuu3 "/tmp/wmqsetup.sh"
